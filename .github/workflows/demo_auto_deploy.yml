name: CI/CD DEPLOYMENT TO DEMO SERVER

on:
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository with submodules
        uses: actions/checkout@v4
        with:
          submodules: true 

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.DEMO_LIGHTSAIL_SSH_KEY }}

      - name: Test SSH connection
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.DEMO_LIGHTSAIL_IP }} "echo 'SSH connection successful!'"

      - name: Build and Deploy
        if: success()
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.DEMO_LIGHTSAIL_IP }} << 'EOF'
          cd /home/ubuntu/noq_app_deployment

          # Update noq_app_deployment repo
          echo "UPDATING DEPLOYMENT REPO"
          git pull
          
          # Handle submodule updates
          echo "FETCHING AND UPDATING SUBMODULES..."
          git submodule update --init --recursive --remote --force

          # Create and setup .env file
          echo "SETTING UP .env..."
          rm -f .env
          {
            echo "DB_NAME=${{ secrets.DEMO_DB_NAME }}"
            echo "DB_USER=${{ secrets.DEMO_DB_USER }}"
            echo "DB_PASS=${{ secrets.DEMO_DB_PASS }}"
            echo "SECRET_KEY=${{ secrets.DEMO_SECRET_KEY }}"
            echo "DJANGO_SETTINGS_MODULE=${{ secrets.DEMO_DJANGO_SETTINGS_MODULE }}"
            echo "ALLOWED_HOSTS=${{ secrets.DEMO_ALLOWED_HOSTS }}"
            echo "CONTAINER_BACKEND_NAME=${{ secrets.DEMO_CONTAINER_BACKEND_NAME }}"
            echo "CONTAINER_FRONTEND_NAME=${{ secrets.DEMO_CONTAINER_FRONTEND_NAME }}"
            echo "CONTAINER_DB_NAME=postgres-${{ secrets.DEMO_CONTAINER_DATABASE_NAME }}"
            echo "CONTAINER_PROXY_NAME=${{ secrets.DEMO_CONTAINER_PROXY_NAME }}"
            echo "EMAIL_HOST_USER=${{ secrets.EMAIL_HOST_USER }}"
            echo "EMAIL_HOST_PASSWORD=${{ secrets.EMAIL_HOST_PW }}"
            echo "RESET_LINK=${{ secrets.DEMO_RESET_LINK }}"
            echo "FRONTEND_URL=${{ secrets.DEMO_FRONTEND_URL }}"
            echo "SERVER_IP=${{ secrets.DEMO_SERVER_IP }}"            
          } > .env
          
          # Update .env.prod for the frontend service
          cd noQ-Frontend
          echo "SETTING UP .env.prod..."
          rm -f .env.prod
          echo "NOQ_OS_MOCK_API=false" > .env.prod
          echo "NOQ_BASE_URL=${{ secrets.DEMO_LIGHTSAIL_DOMAIN_URL }}" >> .env.prod
          cd ..

          # Docker operations with SERVER_IP secret
          echo "STARTING DOCKER OPERATIONS..."
          # Shutdown docker services
          sudo docker compose down

          # Remove anonymous volumes and noq_app_deployment_static-frontend volume
          MAX_RETRIES=5
          RETRY_DELAY=1
          COUNT=0
          
          while [ "$COUNT" -lt "$MAX_RETRIES" ]; do
              echo "Checking for containers (attempt $((COUNT + 1)))..."
              CONTAINERS=$(docker ps -aq)
              if [ -z "$CONTAINERS" ]; then
                  echo "No containers found — safe to remove volumes."
                  sudo docker volume rm noq_app_deployment_static-frontend || true
                  sudo docker volume prune -f
                  break
              else
                  echo "Containers still running or stopped — retrying in $RETRY_DELAY seconds..."
                  sleep $RETRY_DELAY
                  COUNT=$((COUNT + 1))
              fi
          done
          
          if [ "$COUNT" -eq "$MAX_RETRIES" ]; then
              echo "Containers still exist after $MAX_RETRIES attempts. Not able to remove old frontend volume."
          fi

          # Rebuild containers
          sudo docker compose build --no-cache
          # Start services
          sudo docker compose up -d

          echo 'End of Deployment.'
          EOF
